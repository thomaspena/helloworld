# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

#trigger:
#- master

pool:
  vmImage: 'ubuntu-latest'

steps:
# ETAPA DE CONSTRUCCIÓN Y EJECUCION DE PRUEBAS UNITARIAS
# Se construye la aplicación usando Java y Maven
# Se ejecutan las pruebas unitarias
- task: JavaToolInstaller@0
  inputs:
    versionSpec: '17'
    jdkArchitectureOption: 'x64'
    jdkSourceOption: 'PreInstalled'
- task: Maven@4
  inputs:
    mavenPomFile: 'pom.xml'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    javaHomeOption: 'JDKVersion'
    mavenVersionOption: 'Default'  
    mavenAuthenticateFeed: false  
    effectivePomSkip: false 
    sqMavenPluginVersionChoice: 'pom' 
    goals: 'test surefire-report:report-only'

# Publicar Artefacto de las pruebas unitarias en HTML
- task: PublishPipelineArtifact@1
  displayName: 'Publish Test Report'
  inputs:
    targetPath: 'target/site/surefire-report.html'
    artifactName: 'TestReport'

# ETAPA DE ANALISIS CON SONARQUBE
# Preparar análisis de SonarQube
- task: SonarQubePrepare@6
  inputs:
    SonarQube: 'PruebaTecnicaSmartTalent'
    scannerMode: 'CLI'
    configMode: 'manual'
    cliProjectKey: 'PruebaTecnica_PruebaTecnica_f0e36347-390b-4884-92fc-1b5faa31d53e'
    cliProjectName: 'PruebaTecnica'
    cliSources: '.'
    extraProperties: sonar.java.binaries=target/classes
# Ejecutar análisis de SonarQube
- task: SonarQubeAnalyze@6
  inputs:
    jdkversion: 'JAVA_HOME_17_X64'
# Publicar resultados de SonarQube
- task: SonarQubePublish@6
  inputs:
    pollingTimeoutSec: '300'

#ETAPA ANALISIS DE DEPENDENCIAS CON DEPENDENCY CHECK
- task: Maven@4
  displayName: 'Run OWASP Dependency Check'
  inputs:
    mavenPomFile: 'pom.xml'
    goals: 'org.owasp:dependency-check-maven:check'
    options: '-Dformat=ALL'

# Publicar Resultados de Análisis de Dependencias
- task: PublishTestResults@2
  displayName: 'Publish Dependency Check Test Results'
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/dependency-check-report.xml'
    searchFolder: '$(Build.SourcesDirectory)'

# Publicar Artefacto del analisis de dependencias en HTML
- task: PublishPipelineArtifact@1
  displayName: 'Publish Dependency Check Report'
  inputs:
    targetPath: '$(Build.SourcesDirectory)/target'
    artifactName: 'DependencyCheckReport'
    
#ETAPA DESPLIEGUE ENTORNO DE PRUEBA
# Empaquetar la aplicación en un archivo ZIP
- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: 'target'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/app.zip'
    replaceExistingArchive: true

# Publicar el archivo ZIP como un artefacto
- task: PublishPipelineArtifact@1
  displayName: 'Publish Application ZIP'
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)/app.zip'
    artifactName: 'drop'
    publishLocation: 'Container'

# Desplegar en Azure App Service
- task: AzureRmWebAppDeployment@4
  inputs:
    ConnectionType: 'AzureRM'
    azureSubscription: 'ConexionDespliegue'
    appType: 'webApp'
    WebAppName: 'EntornoPrueba'
    packageForLinux: '$(Build.ArtifactStagingDirectory)/app.zip'